#+BABEL: :comments no
#+VERSION: 0.02b
 
* PyOrgMode
** Tools
   [[elisp:org-babel-tangle][Tangle]] (Export the files)
** Documentation
*** TODO TODO LIST [0/9]
    :PROPERTIES:
    :ID:       6d76f100-d4a8-44f3-8206-d5da6c095f78
    :END:
#+begin_src ascii :tangle TODO :exports code
- [ ] TODO Document every function correctly (docstrings)
- [ ] TODO Add some examples
- [ ] TODO Error/Warning managment
- [ ] TODO Check for other OS compatibility
- [ ] TODO Do a validator (input file MUST be output file, and check every function)
- [ ] TODO TODO tags (and others)
- [ ] TODO Add more types of data (List…) 
- [ ] TODO Class DataStructure : Move or delete nodes (you can already do it manually)
- [ ] TODO Classes : add functions to get properties
- [ ] TODO Class Table : Table edition (must add separators, cell length, length calculator…)
- [ ] TODO Class Node: Add the intra-header scheduling
#+end_src
*** BUG LIST [0%]
- [ ] The drawers lost indentation and added spaces/tabs in properties  :NONBLOCKING::NODATALOSS: 
*** ChangeLog
    :PROPERTIES:
    :ID:       b2c042e4-e1f4-49ed-8f0e-2b5f8671e080
    :END:
#+begin_src ascii :tangle ChangeLog :exports code
0.02b
- External changes
   Added the patch from KAIHOLA Antti about time format.
0.02a
- External changes
   Added a Clock plugin in order to manage CLOCK: elements
      Thank to "siberianlaika" for the idea
   Added a TYPE attribute to the different OrgPlugins elements
      Maybe we should find a more practical way than this one
   Removed some debug "prints"
   Indentation problem that causes wrong reparenting
      Thanks to Matthew Robison for his patch
   Added a append_clean function to Node class
      This function is used to add a tree to a node
      A call to reparent_cleanlevels is done at the end
   Added reparent_cleanlevels to Node class
      This function reparent all the elements. Using a 
      content to parent way of doing. It checks the content
      of the first element (call it E), and set the parent of
      each E-childs to E. This is really useful when moving
      one tree to another place.
   Loading the default plugins in the Node class init.
      This avoids to do it in the load_from_file (which was a 
      bad idea).
   Added a new example 
      using the TYPE attribute and append_clean.
0.01j
- External changes
   Added load_plugin function to DataStructure
0.01i
- Internal changes
   Renamed Plugin class to OrgPlugin
   Added close function to plugins
   Adding Table cells subdivision (easier editing)
- PyOrgMode.org Structure change
   Added test.py in the document
0.01h
- Internal changes
   Added Plugin system (simplifying the main loop of DataStructure)
   The DataStructure class is now an OrgElement
- External changes
   Node,Table,Drawer and Schedule are now plugins.
    Their object method is now joined by PluginName.Element
- New elements
   Added Table element (as a Plugin)
0.01g
- Changed elements
   Node : Added priority management
0.01f
- New elements
   Added Schedule element for 'DEADLINE: and 'SCHEDULED:
- Optimizations
   Class DataStructure : Trying to simplify the Reg exps
#+end_src
*** Authors [2/2]
- [X] BISSON Jonathan <bissonjonathan on the googlethingy>
- [X] KAIHOLA Antti <akaihol plus orgmode at ambitone dot com>
** Code
*** License
    :PROPERTIES:
    :ID:       31a46da7-f49b-4826-9c46-1513054f6202
    :END:
#+srcname: license_comments
#+begin_src python :tangle PyOrgMode.py :exports code
  # -*- encoding: utf-8 -*-
  ##############################################################################
  #
  #    PyOrgMode, a python module for treating with orgfiles
  #    Copyright (C) 2010 Jonathan BISSON (bissonjonathan on the google thing).
  #    All Rights Reserved
  #
  #    This program is free software: you can redistribute it and/or modify
  #    it under the terms of the GNU General Public License as published by
  #    the Free Software Foundation, either version 3 of the License, or
  #    (at your option) any later version.
  #
  #    This program is distributed in the hope that it will be useful,
  #    but WITHOUT ANY WARRANTY; without even the implied warranty of
  #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  #    GNU General Public License for more details.
  #
  #    You should have received a copy of the GNU General Public License
  #    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  #
  ##############################################################################
#+end_src
*** Imports
    :PROPERTIES:
    :ID:       5fa2a7a6-476a-43c2-81f4-0fee4ee86fe2
    :END:
#+srcname: imports
#+begin_src python :tangle PyOrgMode.py :exports code
  """
  The PyOrgMode class is able to read,modify and create orgfiles. The internal
  representation of the file allows the use of orgfiles easily in your projects.
  """
  
  import re
  import string
  import copy
  import time
#+end_src
*** Class OrgPlugin
    :PROPERTIES:
    :ID:       e78f2703-0843-43d5-8915-e59b411e0617
    :END:
#+srcname: class_OrgPlugin
#+begin_src python :tangle PyOrgMode.py :exports code
  class OrgPlugin:
      """
      Generic class for all plugins
      """
      def __init__(self):
          self.treated = True
      def treat(self,current,line):
          self.treated = True
          return self._treat(current,line)
      def _treat(self,current,line):
          self.treated = False
          return current
      def close(self,current):
          self.treated = True
          return self._close(current)
      def _close(self,current):
          self.treated = False
          return current
#+end_src
*** Class OrgElement
    :PROPERTIES:
    :ID:       caea64f7-03b1-4f45-8abe-81819d89c6a9
    :END:
#+srcname: class_OrgElement
#+begin_src python :tangle PyOrgMode.py :exports code
  class OrgElement:
      """
      Generic class for all Elements excepted text and unrecognized ones
      """ 
      def __init__(self):
          self.content=[]
          self.parent=None
          self.level=0
      def append(self,element):
          # TODO Check validity
          self.content.append(element)
          # Check if the element got a parent attribute
          # If so, we can have childrens into this element
          if hasattr(element,"parent"):
              element.parent = self
          return element
  
#+end_src
*** Class Clock
    :PROPERTIES:
    :ID:       6f9f2e24-8e1d-4cbf-9fc4-bfe3a13a9b0f
    :END:
#+srcname: class_Clock
#+begin_src python :tangle PyOrgMode.py :exports code
  class Clock(OrgPlugin):
      """Plugin for Clock elements"""
      def __init__(self):
          OrgPlugin.__init__(self)
          self.regexp = re.compile("(?:\s*)CLOCK:(?:\s*)\[(.*)\]--\[(.*)\].*=>\s*(.*)")
      def _treat(self,current,line):
          clocked = self.regexp.findall(line)
          if clocked:
              current.append(self.Element(clocked[0][0], clocked[0][1],clocked[0][2]))
          else:
              self.treated = False
          return current
     
      class Element(OrgElement):
          """Clock is an element taking into account CLOCK elements"""
          TYPE = "CLOCK_ELEMENT"
          def __init__(self,start="",stop="",duration=""):
              OrgElement.__init__(self)
              self.dateformat = "%Y-%m-%d %a %H:%M"
              self.timeformat = "%H:%M"
              self.start = self.convert_date(start)
              self.stop = self.convert_date(stop)
              self.duration = time.strptime(duration,self.timeformat)
          def convert_date(self,date):
              """Used to convert dates from a different TZ"""
              return time.strptime(re.sub("\s(.*)\s"," ",date),"%Y-%m-%d %H:%M")
          def format_duration(self,duration):
              """Used to format durations identically to org-mode"""
              timestr = time.strftime(self.timeformat,duration)
              if timestr[0] == '0':
                  return timestr[1:]
              return timestr
          def __str__(self):
              """Outputs the Clock element in text format (e.g CLOCK: [2010-11-20 Sun 19:42]--[2010-11-20 Sun 20:14] =>  0:32)"""
              return "CLOCK: [" + time.strftime(self.dateformat,self.start) + "]--["+ time.strftime(self.dateformat,self.stop) + "] =>  "+self.format_duration(self.duration)+"\n"
  
#+end_src
*** Class Schedule
    :PROPERTIES:
    :ID:       c630bcdb-1a8c-42e0-be7d-00b291478083
    :END:
#+srcname: class_Schedule
#+begin_src python :tangle PyOrgMode.py :exports code
  class Schedule(OrgPlugin):
      """Plugin for Schedule elements"""
      def __init__(self):
          OrgPlugin.__init__(self)
          self.regexp = re.compile("(?:\s*)(SCHEDULED|DEADLINE)(?::\s*)(<.*?>)(?:\s.*|$)")
      def _treat(self,current,line):
          scheduled = self.regexp.findall(line)
          if scheduled:
              current.append(self.Element(scheduled[0][0], scheduled[0][1]))
          else:
              self.treated = False
          return current
  
      class Element(OrgElement):
          """Schedule is an element taking into account DEADLINE and SCHEDULED elements"""
          DEADLINE = 1
          SCHEDULED = 2
          TYPE = "SCHEDULE_ELEMENT"
          def __init__(self,type="",date=""):
              OrgElement.__init__(self)
              self.date = date
              self.type = 0
              if type == "DEADLINE":
                  self.type = self.DEADLINE
              elif type == "SCHEDULED":
                  self.type = self.SCHEDULED
  
          def __str__(self):
              """Outputs the Schedule element in text format (e.g SCHEDULED: <2010-10-10 10:10>)"""
              if self.type == self.DEADLINE:
                  output = "DEADLINE:"
              elif self.type == self.SCHEDULED:
                  output = "SCHEDULED:"
              return output + " " + self.date + "\n"
  
#+end_src
*** Class Drawer
    :PROPERTIES:
    :ID:       72f6c28a-d103-4462-888e-297d49d0122e
    :END:
#+srcname: class_Drawer
#+begin_src python :tangle PyOrgMode.py :exports code
  class Drawer(OrgPlugin):
      """A Plugin for drawers"""
      def __init__(self):
          OrgPlugin.__init__(self)
          self.regexp = re.compile("^(?:\s*?)(?::)(\S.*?)(?::)\s*(.*?)$")
      def _treat(self,current,line):
          drawer = self.regexp.search(line)
          if isinstance(current, Drawer.Element): # We are in a drawer
              if drawer:
                  if drawer.group(1) == "END": # Ending drawer
                      current = current.parent
                  elif drawer.group(2): # Adding a property
                      current.append(self.Property(drawer.group(1),drawer.group(2)))
              else: # Adding text in drawer
                  current.append(line.rstrip("\n"))
          elif drawer: # Creating a drawer
              current = current.append(Drawer.Element(drawer.group(1)))
          else:
              self.treated = False
              return current
          return current # It is a drawer, change the current also (even if not modified)
      
      class Element(OrgElement):
          """A Drawer object, containing properties and text"""
          TYPE = "DRAWER_ELEMENT"
          def __init__(self,name=""):
              OrgElement.__init__(self)
              self.name = name
          def __str__(self):
              output = ":" + self.name + ":\n"
              for element in self.content:
                  output = output + str(element) + "\n"
              output = output + ":END:\n"
              return output
      class Property(OrgElement):
          """A Property object, used in drawers."""
          def __init__(self,name="",value=""):
              OrgElement.__init__(self)
              self.name = name
              self.value = value
          def __str__(self):
              """Outputs the property in text format (e.g. :name: value)"""
              return ":" + self.name + ": " + self.value
  
#+end_src
*** Class Table
    :PROPERTIES:
    :ID:       81c6b9ed-297a-49ab-8209-74873dfc524a
    :END:
#+srcname: class_Table
#+begin_src python :tangle PyOrgMode.py :exports code
  class Table(OrgPlugin):
      """A plugin for table managment"""
      def __init__(self):
          OrgPlugin.__init__(self)
          self.regexp = re.compile("^\s*\|")
      def _treat(self,current,line):
          table = self.regexp.match(line)
          if table:
              if not isinstance(current,self.Element):
                  current = current.append(self.Element())
              current.append(line.rstrip().strip("|").split("|"))
          else:
              if isinstance(current,self.Element):
                  current = current.parent
              self.treated = False
          return current
  
      class Element(OrgElement):
          """
          A Table object
          """
          TYPE = "TABLE_ELEMENT"
          def __init__(self):
              OrgElement.__init__(self)
          def __str__(self):
              output = ""
              for element in self.content:
                  output = output + "|"
                  for cell in element:
                      output = output + str(cell) + "|"
                  output = output + "\n"
              return output
          
  
#+end_src
*** Class Node
    :PROPERTIES:
    :ID:       3b4ae05e-be52-4854-a638-ecc8d2480512
    :END:
#+srcname: class_Node
#+begin_src python :tangle PyOrgMode.py :exports code
  class Node(OrgPlugin):
      def __init__(self):
          OrgPlugin.__init__(self)
          self.regexp = re.compile("^(\*+)\s*(\[.*\])?\s*(.*)$")
      def _treat(self,current,line):
          heading = self.regexp.findall(line)
          if heading: # We have a heading
  
              if current.parent :
                  current.parent.append(current)
    
                    # Is that a new level ?
              if (len(heading[0][0]) > current.level): # Yes
                  parent = current # Parent is now the current node
              else:
                  parent = current.parent # If not, the parent of the current node is the parent
                  # If we are going back one or more levels, walk through parents
                  while len(heading[0][0]) < current.level:
                      current = current.parent
    
              # Creating a new node and assigning parameters
              current = Node.Element() 
              current.level = len(heading[0][0])
              current.heading = re.sub(":([\w]+):","",heading[0][2]) # Remove tags
              current.priority = heading[0][1]
              current.parent = parent
                    
                    # Looking for tags
              heading_without_links = re.sub(" \[(.+)\]","",heading[0][2])
              current.tags = re.findall(":([\w]+):",heading_without_links)
          else:
              self.treated = False
          return current
      def _close(self,current):
          # Add the last node
          if current.level>0:
              current.parent.append(current)
  
      class Element(OrgElement):
          # Defines an OrgMode Node in a structure
          # The ID is auto-generated using uuid.
          # The level 0 is the document itself
          TYPE = "NODE_ELEMENT"    
          def __init__(self):
              OrgElement.__init__(self)
              self.content = []       
              self.level = 0
              self.heading = ""
              self.priority = ""
              self.tags = []
            # TODO  Scheduling structure
    
          def __str__(self):
              output = ""
              
              if hasattr(self,"level"):
                  output = output + "*"*self.level
    
              if self.parent is not None:
                  output = output + " "
                  if self.priority:
                      output = output + self.priority + " "
                  output = output + self.heading
    
                  for tag in self.tags:
                      output= output + ":" + tag + ":"
    
                  output = output + "\n"
      
              for element in self.content:
                  output = output + element.__str__()
    
              return output
          def append_clean(self,element):
              if isinstance(element,list):
                  self.content.extend(element)
              else:
                  self.content.append(element)
              self.reparent_cleanlevels(self)
          def reparent_cleanlevels(self,element=None,level=None):
              """
              Reparent the childs elements of 'element' and make levels simpler.
              Useful after moving one tree to another place or another file.
              """
              if element == None:
                  element = self.root
              if hasattr(element,"level"):
                  if level == None:
                      level = element.level
                  else:
                      element.level = level
  
              if hasattr(element,"content"):
                  for child in element.content:
                      if hasattr(child,"heading"):
                          print(child.heading)
                      print("Level: "+str(level)+" Id: "+hex(id(child))+" Type: "+child.TYPE)
                      if hasattr(child,"parent"):
                          child.parent = element
                          self.reparent_cleanlevels(child,level+1)    
  
#+end_src
*** Class DataStructure
    :PROPERTIES:
    :ID:       123f19bd-309b-4bda-91de-9c1ca202fac4
    :END:
#+srcname: class_Property
#+begin_src python :tangle PyOrgMode.py :exports code
  class DataStructure(OrgElement):
      """
      Data structure containing all the nodes
      The root property contains a reference to the level 0 node
      """
      root = None
      TYPE = "DATASTRUCTURE_ELEMENT"
      def __init__(self):
          OrgElement.__init__(self)
          self.plugins = []
          self.load_plugins(Table(),Drawer(),Node(),Schedule(),Clock())
          # Add a root element
          # The root node is a special node (no parent) used as a container for the file
          self.root = Node.Element()
          self.root.parent = None
          self.level = 0
  
      def load_plugins(self,*arguments,**keywords):
          for plugin in arguments:
              self.plugins.append(plugin)
      def load_from_file(self,name):
          current = self.root
          file = open(name,'r')
  
          for line in file:
              
              for plugin in self.plugins:
                  current = plugin.treat(current,line)
                  if plugin.treated: # Plugin found something
                      treated = True
                      break;
                  else:
                      treated = False
              if not treated and line is not None: # Nothing special, just content
                  current.append(line)
  
          for plugin in self.plugins:
              current = plugin.close(current)
          file.close()
  
      def save_to_file(self,name,node=None):
          output = open(name,'w')
          if node == None:
              node = self.root
          output.write(str(node))
          output.close()
  
#+end_src
    
** Tests
*** Take test.org, outputs output.org
    :PROPERTIES:
    :ID:       f02cbd6b-e66e-4afa-9f00-ce6c0ea174d5
    :END:
#+srcname: test_test.org
#+begin_src python :tangle test.py :exports code
    """Tests for parsing and outputting a simple .org test file
    
    You need the fr_FR.UTF-8 locale to run these tests
    """
    
    import locale
    import PyOrgMode
    try:
        import unittest2 as unittest
    except ImportError:
        import unittest
    
    
    def _normalize_ignored(line):
        """Normalize a line to ignore differences which aren't yet handled"""
        if (line.startswith('   ')
            and line[3:].startswith(('CLOCK: [',
                                     ':PROPERTIES:',
                                     ':ORDERED:',
                                     ':CLOCKSUM:',
                                     ':END:'))):
            line = line[3:]
        line = line.replace(':ORDERED:  t', ':ORDERED: t')
        return line
    
    
    class TestExampleOrgFile(unittest.TestCase):
        def test_test_org(self):
            test = PyOrgMode.DataStructure()
            test.load_from_file("test.org")
            locale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')
            test.save_to_file("output.org")
            original = [_normalize_ignored(line) for line in open("test.org")]
            saved = [_normalize_ignored(line) for line in open("output.org")]
            self.assertEqual(saved, original)
    
    
    if __name__ == '__main__':
        unittest.main()
    
      
    
#+end_src
*** Read all the DEADLINE and SCHEDULED elements and put them in a file alone
    :PROPERTIES:
    :ID:       bb466fe7-ee89-408e-850d-25923e31ba0f
    :END:
#+srcname: test_simple-agenda.org
#+begin_src python :tangle test_simple-agenda.py :exports code
  import PyOrgMode
  import copy
  try:
      import unittest2 as unittest
  except ImportError:
      import unittest
  
  
  def Get_Scheduled_Elements(element, data=[]):
      """
      Grab the data from all scheduled elements for all the tree defined by 'element' recursively.
      Returns all the elements as an array.
      """
      if hasattr(element,"content"):
          for child in element.content:
              if hasattr(child,"TYPE"):
                  if child.TYPE == "SCHEDULE_ELEMENT":
                      # This element is scheduled, we are creating a copy of it
                      data.append(copy.deepcopy(child.parent))
              Get_Scheduled_Elements(child,data)
      return data
  
  
  class TestAgenda(unittest.TestCase):
      def test_agenda(self):
          # Creating the input and output files data structures
          input_file = PyOrgMode.DataStructure()
          output_file = PyOrgMode.DataStructure()
  
          # Loading from agenda.org file
          input_file.load_from_file("agenda.org")
  
          # Get the scheduled elements (those with SCHEDULE, DEADLINE in them, not in the node name)
          scheduled_elements = Get_Scheduled_Elements(input_file.root)
  
          # Assign these element to the root (reparent each elements recursively, relevel them cleanly)
          output_file.root.append_clean(scheduled_elements)
  
          output_file.save_to_file("test_scheduled_output.org")
  
          saved = open("test_scheduled_output.org").readlines()
          self.assertEqual(saved, ['* Element 1\n',
                                   'SCHEDULED: <2011-02-08 mar.>\n',
                                   '* Element 3\n',
                                   'DEADLINE: <2011-02-08 mar.>\n',
                                   '** Test\n',
                                   '** Element 4\n',
                                   'SCHEDULED: <2011-02-08 mar.>\n',
                                   '*** Couic\n',
                                   '* Element 4\n',
                                   'SCHEDULED: <2011-02-08 mar.>\n',
                                   '** Couic\n'])
  
  
  if __name__ == '__main__':
      unittest.main()
  
#+end_src
*** Date and time formatting
    :PROPERTIES:
    :ID:       29be57c8-e722-4b00-82e9-d663b260548f
    :END:
#+srcname: test_clock.org
#+begin_src python :tangle test_clock.py :exports code  import PyOrgMode
  import PyOrgMode
  import time
  import unittest
  
  
  class TestClockElement(unittest.TestCase):
      def test_duration_format(self):
          """Durations are formatted identically to org-mode"""
          clock_elem = PyOrgMode.Clock.Element('2011-03-25 06:53',
                                               '2011-03-25 09:12',
                                               '2:19')
          for hour in '0', '1', '5', '10', '12', '13', '19', '23':
              for minute in '00', '01', '29', '40', '59':
                  orig_str = '%s:%s' % (hour, minute)
                  orig_tuple = time.strptime(orig_str,clock_elem.timeformat)
                  formatted_str = clock_elem.format_duration(orig_tuple)
                  self.assertEqual(formatted_str, orig_str)
  
  
  if __name__ == '__main__':
      unittest.main()
  
#+end_src
